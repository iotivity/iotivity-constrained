{
  "comments": [
    {
      "key": {
        "uuid": "5aaae553_79d8cf53",
        "filename": "api/oc_collection.c",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 21
      },
      "writtenOn": "2017-07-17T05:21:05Z",
      "side": 1,
      "message": "What is this function supposed to do? It seems odd to delete the resource itself - and from here - especially if it was the app that created the resource, and not the collections module.",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_59bab3e2",
        "filename": "api/oc_collection.c",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 12373
      },
      "writtenOn": "2017-07-17T08:01:48Z",
      "side": 1,
      "message": "This is a simple helper method to also clean-up the link instead of only removing it. We usually simply allocate resource using oc_new_resource and add it to a link. We do not store it additionally. I wanted to document later in the API that this function releases also the resource unless the delete handler is set and that this must be set, if not oc_new_resource was used to allocate it. This way we do not need to have our own list of allocated resources.",
      "parentUuid": "5aaae553_79d8cf53",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_d4c3ca88",
        "filename": "api/oc_collection.c",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 21
      },
      "writtenOn": "2017-07-17T22:11:59Z",
      "side": 1,
      "message": "But a collection only refers to resources. It doesn",
      "parentUuid": "5aaae553_59bab3e2",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_d9e6a316",
        "filename": "api/oc_collection.c",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 21
      },
      "writtenOn": "2017-07-17T05:21:05Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_39e25704",
        "filename": "api/oc_collection.c",
        "patchSetId": 2
      },
      "lineNbr": 483,
      "author": {
        "id": 21
      },
      "writtenOn": "2017-07-17T05:21:05Z",
      "side": 1,
      "message": "Delete seems more appropriate here than remove, don\u0027t you think?\nAlso, are we ever going to use this function? Its not exposed via oc_api. \nIf we\u0027re not going to use it, might be better to leave it out for now.",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_19b43bf1",
        "filename": "api/oc_collection.c",
        "patchSetId": 2
      },
      "lineNbr": 483,
      "author": {
        "id": 12373
      },
      "writtenOn": "2017-07-17T08:01:48Z",
      "side": 1,
      "message": "Will do the renaming.\nAs Reinhard already used some function from oc_collection.h that is not in oc_api.h and as both are in include, I somehow failed to see why we need to flood a single include with all functions. But I can also add it there.\nWe are already using it when restarting the stack and upon shutdown.",
      "parentUuid": "5aaae553_39e25704",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_39b017f4",
        "filename": "api/oc_collection.c",
        "patchSetId": 2
      },
      "lineNbr": 483,
      "author": {
        "id": 12373
      },
      "writtenOn": "2017-07-17T08:32:27Z",
      "side": 1,
      "message": "Moved declaration to oc_api.h.",
      "parentUuid": "5aaae553_19b43bf1",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_743c5694",
        "filename": "api/oc_collection.c",
        "patchSetId": 2
      },
      "lineNbr": 483,
      "author": {
        "id": 21
      },
      "writtenOn": "2017-07-17T22:11:59Z",
      "side": 1,
      "message": "Having all OCF specific APIs in oc_api.h was the intent. If something is missing, we should probably add it. \nThis is excluding the other common stuff in oc_rep and oc_helpers.\nIn many cases you\u0027ll see that oc_client/server_api implements an API that calls into internal APIs to do stuff. As for why its useful, I think it is helpful for developers familiar with the OCF spec to sense the scope of available APIs by looking in one place.",
      "parentUuid": "5aaae553_19b43bf1",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_b91647f0",
        "filename": "api/oc_ri.c",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 21
      },
      "writtenOn": "2017-07-17T05:21:05Z",
      "side": 1,
      "message": "Can we refactor this to remove code duplication between here\nand oc_collection_free()? Perhaps we could have another function like oc_ri_free_resource_properties(...) and have this function (and oc_collection_free()) simply call that and free up the resource/collection structures.",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_79a68fc3",
        "filename": "api/oc_ri.c",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 12373
      },
      "writtenOn": "2017-07-17T08:32:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5aaae553_b91647f0",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_59d39338",
        "filename": "include/oc_api.h",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 21
      },
      "writtenOn": "2017-07-17T05:21:05Z",
      "side": 1,
      "message": "Why do we need a remove link? In any case, the naming is confusing. You could remove a link from a collection and free a link itself.",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_19abdb8a",
        "filename": "include/oc_api.h",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 12373
      },
      "writtenOn": "2017-07-17T08:32:27Z",
      "side": 1,
      "message": "Dropped it as we only need the delete function.",
      "parentUuid": "5aaae553_59d39338",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_99190b25",
        "filename": "include/oc_collection.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 21
      },
      "writtenOn": "2017-07-17T05:21:05Z",
      "side": 1,
      "message": "The OCF spec defines a name \"n\" property for this purpose. We can have all resources (and by extension collections) define it. But we can do it in a separate commit.",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_39b9f7e9",
        "filename": "include/oc_collection.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 12373
      },
      "writtenOn": "2017-07-17T08:01:48Z",
      "side": 1,
      "message": "The spec mentions both and I wanted to avoid the enormous overhead with the handlers only to list the n property. This way I can store the info right along with the collection and it will delete the variable with the collection. With the handlers the app needs to replicate all the management of the stack.\n\nI will rename it to n and leave it in the lynx branch for simplification. In the master branch I will drop it.",
      "parentUuid": "5aaae553_99190b25",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_3446de24",
        "filename": "include/oc_collection.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 21
      },
      "writtenOn": "2017-07-17T22:11:59Z",
      "side": 1,
      "message": "If you need a property that adds a ",
      "parentUuid": "5aaae553_39b9f7e9",
      "revId": "505af00debf2f0d029878742e1e061a68f77324a",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    }
  ]
}