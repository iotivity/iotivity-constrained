{
  "comments": [
    {
      "key": {
        "uuid": "5ac10518_01bb4c0f",
        "filename": "messaging/coap/observe.c",
        "patchSetId": 3
      },
      "lineNbr": 303,
      "author": {
        "id": 21
      },
      "writtenOn": "2017-03-21T17:27:03Z",
      "side": 1,
      "message": "This particular fix is correct. \nBut I just noticed another issue here, which has always been there, that even if we have supply response payload, we should also be sending the resource handle (and not NULL) in the call to coap_notify_observers() since if we match only by endpoint, that same endpoint could\u0027ve subscribed to multiple resources. This issue (and this logic) is only present when we\u0027re sending notifications from a \"slow\" resource via the separate response mechanism, and not otherwise. I\u0027ll post a fix for it.",
      "revId": "b8f377e95382c53c8a8a74b25bde70705cac825c",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac10518_c13c6496",
        "filename": "messaging/coap/observe.c",
        "patchSetId": 3
      },
      "lineNbr": 308,
      "author": {
        "id": 21
      },
      "writtenOn": "2017-03-21T17:27:03Z",
      "side": 1,
      "message": "I think this isn\u0027t necessary because the resource itself keeps track of its number of observers, and all you have to do is read it here.. \nThe goal is to return the number of observers (# of clients observing this resource) to its caller so it can tear down any periodic callbacks when that number reaches 0.\nI guess your change here might not alter that behavior since any returned num_observers from inside this block will be \u003e\u003d1.",
      "revId": "b8f377e95382c53c8a8a74b25bde70705cac825c",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac10518_c16304b0",
        "filename": "messaging/coap/observe.c",
        "patchSetId": 3
      },
      "lineNbr": 308,
      "author": {
        "id": 354
      },
      "writtenOn": "2017-03-21T17:38:30Z",
      "side": 1,
      "message": "What prompted me to do this was the case where we pass resource\u003d\u003dNULL and endpoint!\u003dNULL.\n\nIn this scenario, imagine that this specific endpoint is observing three different resources (each one observed by other 9, 19, and 29 endpoints). The numbers are exaggerated here to make easier understand.\n\n- /res/1 has num_observers \u003d 10\n- /res/2 has num_observers \u003d 20\n- /res/3 has num_observers \u003d 30\n\nWhat value we should return?\n\nMy understanding returning 10, 20, or 30 is not helpful. I think 3 is a reasonable value: the number of notifications we sent. Another option is return 1 (number of different endpoints we talked to).",
      "parentUuid": "5ac10518_c13c6496",
      "revId": "b8f377e95382c53c8a8a74b25bde70705cac825c",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac10518_a10598c3",
        "filename": "messaging/coap/observe.c",
        "patchSetId": 3
      },
      "lineNbr": 308,
      "author": {
        "id": 21
      },
      "writtenOn": "2017-03-21T18:12:30Z",
      "side": 1,
      "message": "\u003e My understanding returning 10, 20, or 30 is not helpful. I think 3 is a \n\u003e reasonable value: the number of notifications we sent. \n\nNo, the value that is actually useful over here is if the resource has 0 observers. It is used on the server side only to tear down any pending periodic callbacks to coap_notify_observers(). Any value \u003e\u003d1 when there are observers is fine to return. So, your change is probably fine. The code was previously just returning num_observers for that resource instead which would produce the same result.\n\n\u003e What prompted me to do this was the case where we pass \n\u003e resource\u003d\u003dNULL and endpoint!\u003dNULL.\n\nYes, this is precisely the issue I spoke about in my other comment. This needs to be fixed and I will post a fix for it. Even when we have the payload and endpoint (which is the case for a separate response), we need to know which resource it is sending from. Once fixed, we will never have a case of resource \u003d\u003d NULL and endpoint !\u003d NULL.",
      "parentUuid": "5ac10518_c16304b0",
      "revId": "b8f377e95382c53c8a8a74b25bde70705cac825c",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    }
  ]
}