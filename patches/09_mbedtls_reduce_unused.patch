From 2da34b9c01d1b6a5a0d2efcae4526081cb9d5269 Mon Sep 17 00:00:00 2001
From: agrkush <kush.agrawal@samsung.com>
Date: Mon, 11 Jun 2018 22:35:53 +0900
Subject: [PATCH] mbedTLS dead code remove for optimization

Signed-off-by: agrkush <kush.agrawal@samsung.com>
---
 library/asn1parse.c |   25 +++++++++++++++++++++
 library/bignum.c    |   60 +++++++++++++++++++++++++++++++--------------------
 library/ecdsa.c     |   20 +++++++++++++++++
 library/pk.c        |   20 +++++++++++++++++
 library/pkparse.c   |   20 +++++++++++++++++
 library/ssl_cli.c   |   15 +++++++++++++
 6 files changed, 137 insertions(+), 23 deletions(-)

diff --git a/library/asn1parse.c b/library/asn1parse.c
index 4dd65c0..259edbd 100644
--- a/library/asn1parse.c
+++ b/library/asn1parse.c
@@ -243,6 +243,7 @@ int mbedtls_asn1_get_sequence_of( unsigned char **p,
                           mbedtls_asn1_sequence *cur,
                           int tag)
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     size_t len;
     mbedtls_asn1_buf *buf;
@@ -286,6 +287,10 @@ int mbedtls_asn1_get_sequence_of( unsigned char **p,
         return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 
     return( 0 );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 int mbedtls_asn1_get_alg( unsigned char **p,
@@ -336,6 +341,7 @@ int mbedtls_asn1_get_alg_null( unsigned char **p,
                        const unsigned char *end,
                        mbedtls_asn1_buf *alg )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     mbedtls_asn1_buf params;
 
@@ -348,10 +354,15 @@ int mbedtls_asn1_get_alg_null( unsigned char **p,
         return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 
     return( 0 );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 void mbedtls_asn1_free_named_data( mbedtls_asn1_named_data *cur )
 {
+#ifndef ST_MBEDTLS_OPT
     if( cur == NULL )
         return;
 
@@ -359,10 +370,15 @@ void mbedtls_asn1_free_named_data( mbedtls_asn1_named_data *cur )
     mbedtls_free( cur->val.p );
 
     mbedtls_zeroize( cur, sizeof( mbedtls_asn1_named_data ) );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 void mbedtls_asn1_free_named_data_list( mbedtls_asn1_named_data **head )
 {
+#ifndef ST_MBEDTLS_OPT
     mbedtls_asn1_named_data *cur;
 
     while( ( cur = *head ) != NULL )
@@ -371,11 +387,16 @@ void mbedtls_asn1_free_named_data_list( mbedtls_asn1_named_data **head )
         mbedtls_asn1_free_named_data( cur );
         mbedtls_free( cur );
     }
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 mbedtls_asn1_named_data *mbedtls_asn1_find_named_data( mbedtls_asn1_named_data *list,
                                        const char *oid, size_t len )
 {
+#ifndef ST_MBEDTLS_OPT
     while( list != NULL )
     {
         if( list->oid.len == len &&
@@ -388,6 +409,10 @@ mbedtls_asn1_named_data *mbedtls_asn1_find_named_data( mbedtls_asn1_named_data *
     }
 
     return( list );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 #endif /* MBEDTLS_ASN1_PARSE_C */
diff --git a/library/bignum.c b/library/bignum.c
index 8ab25b2..294eed2 100644
--- a/library/bignum.c
+++ b/library/bignum.c
@@ -260,7 +260,7 @@ cleanup:
  */
 int mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap )
 {
-#if 0
+#ifndef ST_MBEDTLS_OPT
     int ret, s;
     size_t i;
     mbedtls_mpi_uint tmp;
@@ -290,8 +290,9 @@ cleanup:
 
     return( ret );
 #else
+    oc_abort("ST_APP Skipped for optimization");
     return( 0 );
-#endif
+#endif /* ST_MBEDTLS_OPT */
 }

 /*
@@ -420,7 +422,7 @@ size_t mbedtls_mpi_size( const mbedtls_mpi *X )
  */
 static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
 {
-#if 0
+#ifndef ST_MBEDTLS_OPT
     *d = 255;
 
     if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
@@ -430,6 +432,7 @@ static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
     if( *d >= (mbedtls_mpi_uint) radix )
         return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );
 #endif
+    oc_abort("ST_APP Skipped for optimization");
     return( 0 );
 }
 
@@ -438,7 +441,7 @@ static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
  */
 int mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s )
 {
-#if 0
+#ifndef ST_MBEDTLS_OPT
     int ret;
     size_t i, j, slen, n;
     mbedtls_mpi_uint d;
@@ -505,8 +508,9 @@ cleanup:
 
     return( ret );
 #else
+    oc_abort("ST_APP Skipped for optimization");
     return( 0 );
-#endif
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -514,7 +518,7 @@ cleanup:
  */
 static int mpi_write_hlp( mbedtls_mpi *X, int radix, char **p )
 {
-#if 0
+#ifndef ST_MBEDTLS_OPT
     int ret;
     mbedtls_mpi_uint r;
 
@@ -536,8 +540,9 @@ cleanup:
 
     return( ret );
 #else
+    oc_abort("ST_APP Skipped for optimization");
     return( 0 );
-#endif
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -546,7 +551,7 @@ cleanup:
 int mbedtls_mpi_write_string( const mbedtls_mpi *X, int radix,
                               char *buf, size_t buflen, size_t *olen )
 {
-#if 0
+#ifndef ST_MBEDTLS_OPT
     int ret = 0;
     size_t n;
     char *p;
@@ -616,8 +621,9 @@ cleanup:
 
     return( ret );
 #else
+    oc_abort("ST_APP Skipped for optimization");
     return( 0 );
-#endif
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 #if defined(MBEDTLS_FS_IO)
@@ -1099,7 +1105,7 @@ cleanup:
  */
 int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
 {
-#if 0
+#ifndef ST_MBEDTLS_OPT
     mbedtls_mpi _B;
     mbedtls_mpi_uint p[1];
 
@@ -1110,8 +1116,9 @@ int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint
 
     return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 #else
+    oc_abort("ST_APP Skipped for optimization");
     return( 0 );
-#endif
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -1471,7 +1478,7 @@ cleanup:
  */
 int mbedtls_mpi_div_int( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, mbedtls_mpi_sint b )
 {
-#if 0
+#ifndef ST_MBEDTLS_OPT
     mbedtls_mpi _B;
     mbedtls_mpi_uint p[1];
 
@@ -1482,8 +1489,9 @@ int mbedtls_mpi_div_int( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, m
 
     return( mbedtls_mpi_div_mpi( Q, R, A, &_B ) );
 #else
+    oc_abort("ST_APP Skipped for optimization");
     return( 0 );
-#endif
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -1514,7 +1522,7 @@ cleanup:
  */
 int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b )
 {
-#if 0
+#ifndef ST_MBEDTLS_OPT
     size_t i;
     mbedtls_mpi_uint x, y, z;
 
@@ -1564,6 +1572,7 @@ int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_
 
     *r = y;
 #endif
+    oc_abort("ST_APP Skipped for optimization");
     return( 0 );
 }
 
@@ -1572,7 +1581,7 @@ int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_
  */
 static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
 {
-#if 0
+#ifndef ST_MBEDTLS_OPT
     mbedtls_mpi_uint x, m0 = N->p[0];
     unsigned int i;
 
@@ -1583,7 +1592,9 @@ static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
         x *= ( 2 - ( m0 * x ) );
 
     *mm = ~x + 1;
-#endif
+#else
+    oc_abort("ST_APP Skipped for optimization");
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -1592,7 +1603,7 @@ static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
 static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                          const mbedtls_mpi *T )
 {
-#if 0
+#ifndef ST_MBEDTLS_OPT
     size_t i, n, m;
     mbedtls_mpi_uint u0, u1, *d;
 
@@ -1627,6 +1638,7 @@ static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi
         /* prevent timing attacks */
         mpi_sub_hlp( n, A->p, T->p );
 #endif
+    oc_abort("ST_APP Skipped for optimization");
     return( 0 );
 }
 
@@ -1635,7 +1647,7 @@ static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi
  */
 static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
 {
-#if 0
+#ifndef ST_MBEDTLS_OPT
     mbedtls_mpi_uint z = 1;
     mbedtls_mpi U;
 
@@ -1644,8 +1656,9 @@ static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint m
 
     return( mpi_montmul( A, &U, N, mm, T ) );
 #else
+    oc_abort("ST_APP Skipped for optimization");
     return( 0 );
-#endif
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -1653,7 +1666,7 @@ static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint m
  */
 int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
 {
-#if 0
+#ifndef ST_MBEDTLS_OPT
     int ret;
     size_t wbits, wsize, one = 1;
     size_t i, j, nblimbs;
@@ -1856,8 +1869,9 @@ cleanup:
 
     return( ret );
 #else
+    oc_abort("ST_APP Skipped for optimization");
     return( 0 );
-#endif
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
diff --git a/library/ecdsa.c b/library/ecdsa.c
index 826fefe..617ae7a 100644
--- a/library/ecdsa.c
+++ b/library/ecdsa.c
@@ -74,6 +74,7 @@ int mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                 const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret, key_tries, sign_tries, blind_tries;
     mbedtls_ecp_point R;
     mbedtls_mpi k, e, t;
@@ -157,6 +158,10 @@ cleanup:
     mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 
     return( ret );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT*/
 }
 #endif /* MBEDTLS_ECDSA_SIGN_ALT */
 
@@ -292,6 +297,7 @@ cleanup:
 static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
                                     unsigned char *sig, size_t *slen )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];
     unsigned char *p = buf + sizeof( buf );
@@ -308,6 +314,10 @@ static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
     *slen = len;
 
     return( 0 );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -319,6 +329,7 @@ int mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t
                            int (*f_rng)(void *, unsigned char *, size_t),
                            void *p_rng )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     mbedtls_mpi r, s;
 
@@ -345,6 +356,10 @@ cleanup:
     mbedtls_mpi_free( &s );
 
     return( ret );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 #if ! defined(MBEDTLS_DEPRECATED_REMOVED) && \
@@ -417,8 +432,13 @@ cleanup:
 int mbedtls_ecdsa_genkey( mbedtls_ecdsa_context *ctx, mbedtls_ecp_group_id gid,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
 {
+#ifndef ST_MBEDTLS_OPT
     return( mbedtls_ecp_group_load( &ctx->grp, gid ) ||
             mbedtls_ecp_gen_keypair( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 #endif /* MBEDTLS_ECDSA_GENKEY_ALT */
 
diff --git a/library/pk.c b/library/pk.c
index b52c73f..1985e7b 100644
--- a/library/pk.c
+++ b/library/pk.c
@@ -258,6 +258,7 @@ int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
              unsigned char *sig, size_t *sig_len,
              int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
 {
+#ifndef ST_MBEDTLS_OPT
     if( ctx == NULL || ctx->pk_info == NULL ||
         pk_hashlen_helper( md_alg, &hash_len ) != 0 )
         return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
@@ -267,6 +268,10 @@ int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
 
     return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                      sig, sig_len, f_rng, p_rng ) );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -277,6 +282,7 @@ int mbedtls_pk_decrypt( mbedtls_pk_context *ctx,
                 unsigned char *output, size_t *olen, size_t osize,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
 {
+#ifndef ST_MBEDTLS_OPT
     if( ctx == NULL || ctx->pk_info == NULL )
         return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 
@@ -285,6 +291,10 @@ int mbedtls_pk_decrypt( mbedtls_pk_context *ctx,
 
     return( ctx->pk_info->decrypt_func( ctx->pk_ctx, input, ilen,
                 output, olen, osize, f_rng, p_rng ) );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -295,6 +305,7 @@ int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                 unsigned char *output, size_t *olen, size_t osize,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
 {
+#ifndef ST_MBEDTLS_OPT
     if( ctx == NULL || ctx->pk_info == NULL )
         return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 
@@ -303,6 +314,10 @@ int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
 
     return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                 output, olen, osize, f_rng, p_rng ) );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -310,6 +325,7 @@ int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
  */
 int mbedtls_pk_check_pair( const mbedtls_pk_context *pub, const mbedtls_pk_context *prv )
 {
+#ifndef STP_MBEDTLS_OPT
     if( pub == NULL || pub->pk_info == NULL ||
         prv == NULL || prv->pk_info == NULL ||
         prv->pk_info->check_pair_func == NULL )
@@ -326,6 +342,10 @@ int mbedtls_pk_check_pair( const mbedtls_pk_context *pub, const mbedtls_pk_conte
     {
         if( pub->pk_info != prv->pk_info )
             return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif
     }
 
     return( prv->pk_info->check_pair_func( pub->pk_ctx, prv->pk_ctx ) );
diff --git a/library/pkparse.c b/library/pkparse.c
index e19511e..5cb5e39 100644
--- a/library/pkparse.c
+++ b/library/pkparse.c
@@ -179,6 +179,7 @@ int mbedtls_pk_parse_public_keyfile( mbedtls_pk_context *ctx, const char *path )
 static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                             mbedtls_asn1_buf *params )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
 
     /* Tag may be either OID or SEQUENCE */
@@ -206,6 +207,10 @@ static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                 MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 
     return( 0 );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 #if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
@@ -793,6 +798,7 @@ static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                   const unsigned char *key,
                                   size_t keylen )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     int version, pubkey_done;
     size_t len;
@@ -911,6 +917,10 @@ static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
     }
 
     return( 0 );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 #endif /* MBEDTLS_ECP_C */
 
@@ -932,6 +942,7 @@ static int pk_parse_key_pkcs8_unencrypted_der(
                                     const unsigned char* key,
                                     size_t keylen )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret, version;
     size_t len;
     mbedtls_asn1_buf params;
@@ -1010,6 +1021,10 @@ static int pk_parse_key_pkcs8_unencrypted_der(
         return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 
     return( 0 );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -1349,6 +1364,7 @@ int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
 int mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,
                          const unsigned char *key, size_t keylen )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     unsigned char *p;
 #if defined(MBEDTLS_PEM_PARSE_C)
@@ -1389,6 +1405,10 @@ int mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,
 #endif
 
     return( ret );
+#else
+    oc_abort("ST_APP Skipped for optimization");
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 #endif /* MBEDTLS_PK_PARSE_C */
diff --git a/library/ssl_cli.c b/library/ssl_cli.c
index e9b0d82..b9289e2 100644
--- a/library/ssl_cli.c
+++ b/library/ssl_cli.c
@@ -1132,6 +1132,7 @@ static int ssl_parse_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               const unsigned char *buf,
                                               size_t len )
 {
+#ifndef ST_MBEDTLS_OPT
     /*
      * server should use the extension only if we did,
      * and if so the server's value should match ours (and len is always 1)
@@ -1147,6 +1148,10 @@ static int ssl_parse_max_fragment_length_ext( mbedtls_ssl_context *ssl,
     }
 
     return( 0 );
+#else
+  oc_abort("ST_APP Skipped for optimization");
+  return (0);
+#endif /* ST_MBEDTLS_OPT */
 }
 #endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
 
@@ -1246,6 +1251,7 @@ static int ssl_parse_supported_point_formats_ext( mbedtls_ssl_context *ssl,
                                                   const unsigned char *buf,
                                                   size_t len )
 {
+#ifndef ST_MBEDTLS_OPT
     size_t list_size;
     const unsigned char *p;
 
@@ -1282,6 +1288,10 @@ static int ssl_parse_supported_point_formats_ext( mbedtls_ssl_context *ssl,
     mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
     return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
+#else
+  oc_abort("ST_APP Skipped for optimization");
+  return (0);
+#endif /* ST_MBEDTLS_OPT */
 }
 #endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || 
           MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
@@ -2075,6 +2085,7 @@ static int ssl_parse_server_psk_hint( mbedtls_ssl_context *ssl,
                                       unsigned char **p,
                                       unsigned char *end )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret = 0;
     size_t n;
 
@@ -2141,6 +2152,10 @@ static int ssl_parse_server_psk_hint( mbedtls_ssl_context *ssl,
     *p += n;
 
     return( 0 );
+#else
+  oc_abort("ST_APP Skipped for optimization");
+  return (0);
+#endif /* ST_MBEDTLS_OPT */
 }
 #endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
 
-- 
1.7.9.5

